use leptos::*;
use leptos_meta::*;
use crate::components::item_form::ItemForm;
use crate::components::item_list::ItemList;
// Ensure server function structs are directly usable.
// The `#[server]` macro makes them available.
use crate::server_fns::{AddItem, DeleteItem};

#[component]
pub fn AppComponent() -> impl IntoView {
    provide_meta_context();

    // Action to add an item
    let add_item_action = create_server_action::<AddItem>();

    // Action to delete an item
    let delete_item_action = create_server_action::<DeleteItem>();

    // Resource to fetch items. It refetches whenever an item is added or deleted.
    let items_resource = create_resource(
        move || (add_item_action.version().get(), delete_item_action.version().get()),
        |_| async move {
            // GetItems server function call
            match crate::server_fns::get_items().await {
                Ok(items) => items,
                Err(e) => {
                    leptos::logging::error!("Failed to fetch items: {:?}", e);
                    Vec::new() // Return empty vec on error to avoid breaking UI
                }
            }
        }
    );
    
    view! {
        <Title text="Item Management App"/>
        <Meta name="description" content="A simple item management app built with Leptos."/>
        <Stylesheet id="leptos" href="/pkg/frontend.css"/> // Points to CSS generated by cargo-leptos

        <main class="container">
            <h1>"Item Management"</h1>
            
            <div class="card">
                <h2>"Add New Item"</h2>
                <ItemForm add_item_action=add_item_action />
            </div>

            <div class="card">
                <h2>"Current Items"</h2>
                <Suspense fallback=move || view! { <p class="loading-indicator">"Loading items..."</p> }>
                    {move || match items_resource.get() {
                        None => view! { <p class="loading-indicator">"Loading..."</p> }.into_view(),
                        Some(items_vec) => { // items_resource directly gives Vec<Item>
                            if items_vec.is_empty() {
                                view! { <p>"No items yet. Add one above!"</p> }.into_view()
                            } else {
                                view! { <ItemList items=items_vec delete_item_action=delete_item_action /> }.into_view()
                            }
                        }
                    }}
                </Suspense>
            </div>
        </main>
    }
} 